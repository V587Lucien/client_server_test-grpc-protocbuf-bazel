// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CSLibs.proto

#include "CSLibs.pb.h"
#include "CSLibs.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* ServerService_method_names[] = {
  "/ServerService/userLogin",
  "/ServerService/userSignUp",
  "/ServerService/getUserLoginStatus",
  "/ServerService/userLoginOut",
  "/ServerService/waitForOffLine",
};

std::unique_ptr< ServerService::Stub> ServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerService::Stub> stub(new ServerService::Stub(channel));
  return stub;
}

ServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_userLogin_(ServerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userSignUp_(ServerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getUserLoginStatus_(ServerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userLoginOut_(ServerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_waitForOffLine_(ServerService_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ServerService::Stub::userLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_userLogin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::AsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userLogin_, context, request, false);
}

::grpc::Status ServerService::Stub::userSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_userSignUp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::AsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userSignUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::PrepareAsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userSignUp_, context, request, false);
}

::grpc::Status ServerService::Stub::getUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getUserLoginStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::AsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_getUserLoginStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::PrepareAsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_getUserLoginStatus_, context, request, false);
}

::grpc::Status ServerService::Stub::userLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_userLoginOut_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::AsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userLoginOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServerResponse>* ServerService::Stub::PrepareAsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_userLoginOut_, context, request, false);
}

::grpc::ClientReaderWriter< ::ClientRequestParams, ::ServerResponse>* ServerService::Stub::waitForOffLineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ClientRequestParams, ::ServerResponse>::Create(channel_.get(), rpcmethod_waitForOffLine_, context);
}

::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>* ServerService::Stub::AsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ClientRequestParams, ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_waitForOffLine_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>* ServerService::Stub::PrepareAsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ClientRequestParams, ::ServerResponse>::Create(channel_.get(), cq, rpcmethod_waitForOffLine_, context, false, nullptr);
}

ServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::ClientRequestParams, ::ServerResponse>(
          std::mem_fn(&ServerService::Service::userLogin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::ClientRequestParams, ::ServerResponse>(
          std::mem_fn(&ServerService::Service::userSignUp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::ClientRequestParams, ::ServerResponse>(
          std::mem_fn(&ServerService::Service::getUserLoginStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::ClientRequestParams, ::ServerResponse>(
          std::mem_fn(&ServerService::Service::userLoginOut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ServerService::Service, ::ClientRequestParams, ::ServerResponse>(
          std::mem_fn(&ServerService::Service::waitForOffLine), this)));
}

ServerService::Service::~Service() {
}

::grpc::Status ServerService::Service::userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::waitForOffLine(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


