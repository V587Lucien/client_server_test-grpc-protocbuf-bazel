// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSLibs.proto

#ifndef PROTOBUF_INCLUDED_CSLibs_2eproto
#define PROTOBUF_INCLUDED_CSLibs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_CSLibs_2eproto 

namespace protobuf_CSLibs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_CSLibs_2eproto
class ClientRequestParams;
class ClientRequestParamsDefaultTypeInternal;
extern ClientRequestParamsDefaultTypeInternal _ClientRequestParams_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::ClientRequestParams* Arena::CreateMaybeMessage<::ClientRequestParams>(Arena*);
template<> ::ServerResponse* Arena::CreateMaybeMessage<::ServerResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ClientRequestParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientRequestParams) */ {
 public:
  ClientRequestParams();
  virtual ~ClientRequestParams();

  ClientRequestParams(const ClientRequestParams& from);

  inline ClientRequestParams& operator=(const ClientRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequestParams(ClientRequestParams&& from) noexcept
    : ClientRequestParams() {
    *this = ::std::move(from);
  }

  inline ClientRequestParams& operator=(ClientRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequestParams* internal_default_instance() {
    return reinterpret_cast<const ClientRequestParams*>(
               &_ClientRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientRequestParams* other);
  friend void swap(ClientRequestParams& a, ClientRequestParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequestParams* New() const final {
    return CreateMaybeMessage<ClientRequestParams>(NULL);
  }

  ClientRequestParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequestParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientRequestParams& from);
  void MergeFrom(const ClientRequestParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequestParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Request = 1;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // string strUser = 2;
  void clear_struser();
  static const int kStrUserFieldNumber = 2;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  #if LANG_CXX11
  void set_struser(::std::string&& value);
  #endif
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // string strPasswd = 3;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 3;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // string strLTime = 4;
  void clear_strltime();
  static const int kStrLTimeFieldNumber = 4;
  const ::std::string& strltime() const;
  void set_strltime(const ::std::string& value);
  #if LANG_CXX11
  void set_strltime(::std::string&& value);
  #endif
  void set_strltime(const char* value);
  void set_strltime(const char* value, size_t size);
  ::std::string* mutable_strltime();
  ::std::string* release_strltime();
  void set_allocated_strltime(::std::string* strltime);

  // string strMode = 5;
  void clear_strmode();
  static const int kStrModeFieldNumber = 5;
  const ::std::string& strmode() const;
  void set_strmode(const ::std::string& value);
  #if LANG_CXX11
  void set_strmode(::std::string&& value);
  #endif
  void set_strmode(const char* value);
  void set_strmode(const char* value, size_t size);
  ::std::string* mutable_strmode();
  ::std::string* release_strmode();
  void set_allocated_strmode(::std::string* strmode);

  // @@protoc_insertion_point(class_scope:ClientRequestParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr strltime_;
  ::google::protobuf::internal::ArenaStringPtr strmode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_CSLibs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerResponse* other);
  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(NULL);
  }

  ServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:ServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_CSLibs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientRequestParams

// string Request = 1;
inline void ClientRequestParams::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestParams::request() const {
  // @@protoc_insertion_point(field_get:ClientRequestParams.Request)
  return request_.GetNoArena();
}
inline void ClientRequestParams::set_request(const ::std::string& value) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientRequestParams.Request)
}
#if LANG_CXX11
inline void ClientRequestParams::set_request(::std::string&& value) {
  
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestParams.Request)
}
#endif
inline void ClientRequestParams::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientRequestParams.Request)
}
inline void ClientRequestParams::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientRequestParams.Request)
}
inline ::std::string* ClientRequestParams::mutable_request() {
  
  // @@protoc_insertion_point(field_mutable:ClientRequestParams.Request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestParams::release_request() {
  // @@protoc_insertion_point(field_release:ClientRequestParams.Request)
  
  return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestParams::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:ClientRequestParams.Request)
}

// string strUser = 2;
inline void ClientRequestParams::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestParams::struser() const {
  // @@protoc_insertion_point(field_get:ClientRequestParams.strUser)
  return struser_.GetNoArena();
}
inline void ClientRequestParams::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientRequestParams.strUser)
}
#if LANG_CXX11
inline void ClientRequestParams::set_struser(::std::string&& value) {
  
  struser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestParams.strUser)
}
#endif
inline void ClientRequestParams::set_struser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientRequestParams.strUser)
}
inline void ClientRequestParams::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientRequestParams.strUser)
}
inline ::std::string* ClientRequestParams::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:ClientRequestParams.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestParams::release_struser() {
  // @@protoc_insertion_point(field_release:ClientRequestParams.strUser)
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestParams::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:ClientRequestParams.strUser)
}

// string strPasswd = 3;
inline void ClientRequestParams::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestParams::strpasswd() const {
  // @@protoc_insertion_point(field_get:ClientRequestParams.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void ClientRequestParams::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientRequestParams.strPasswd)
}
#if LANG_CXX11
inline void ClientRequestParams::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestParams.strPasswd)
}
#endif
inline void ClientRequestParams::set_strpasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientRequestParams.strPasswd)
}
inline void ClientRequestParams::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientRequestParams.strPasswd)
}
inline ::std::string* ClientRequestParams::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:ClientRequestParams.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestParams::release_strpasswd() {
  // @@protoc_insertion_point(field_release:ClientRequestParams.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestParams::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:ClientRequestParams.strPasswd)
}

// string strLTime = 4;
inline void ClientRequestParams::clear_strltime() {
  strltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestParams::strltime() const {
  // @@protoc_insertion_point(field_get:ClientRequestParams.strLTime)
  return strltime_.GetNoArena();
}
inline void ClientRequestParams::set_strltime(const ::std::string& value) {
  
  strltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientRequestParams.strLTime)
}
#if LANG_CXX11
inline void ClientRequestParams::set_strltime(::std::string&& value) {
  
  strltime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestParams.strLTime)
}
#endif
inline void ClientRequestParams::set_strltime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientRequestParams.strLTime)
}
inline void ClientRequestParams::set_strltime(const char* value, size_t size) {
  
  strltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientRequestParams.strLTime)
}
inline ::std::string* ClientRequestParams::mutable_strltime() {
  
  // @@protoc_insertion_point(field_mutable:ClientRequestParams.strLTime)
  return strltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestParams::release_strltime() {
  // @@protoc_insertion_point(field_release:ClientRequestParams.strLTime)
  
  return strltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestParams::set_allocated_strltime(::std::string* strltime) {
  if (strltime != NULL) {
    
  } else {
    
  }
  strltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strltime);
  // @@protoc_insertion_point(field_set_allocated:ClientRequestParams.strLTime)
}

// string strMode = 5;
inline void ClientRequestParams::clear_strmode() {
  strmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestParams::strmode() const {
  // @@protoc_insertion_point(field_get:ClientRequestParams.strMode)
  return strmode_.GetNoArena();
}
inline void ClientRequestParams::set_strmode(const ::std::string& value) {
  
  strmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientRequestParams.strMode)
}
#if LANG_CXX11
inline void ClientRequestParams::set_strmode(::std::string&& value) {
  
  strmode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestParams.strMode)
}
#endif
inline void ClientRequestParams::set_strmode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientRequestParams.strMode)
}
inline void ClientRequestParams::set_strmode(const char* value, size_t size) {
  
  strmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientRequestParams.strMode)
}
inline ::std::string* ClientRequestParams::mutable_strmode() {
  
  // @@protoc_insertion_point(field_mutable:ClientRequestParams.strMode)
  return strmode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestParams::release_strmode() {
  // @@protoc_insertion_point(field_release:ClientRequestParams.strMode)
  
  return strmode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestParams::set_allocated_strmode(::std::string* strmode) {
  if (strmode != NULL) {
    
  } else {
    
  }
  strmode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmode);
  // @@protoc_insertion_point(field_set_allocated:ClientRequestParams.strMode)
}

// -------------------------------------------------------------------

// ServerResponse

// string Response = 1;
inline void ServerResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::response() const {
  // @@protoc_insertion_point(field_get:ServerResponse.Response)
  return response_.GetNoArena();
}
inline void ServerResponse::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerResponse.Response)
}
#if LANG_CXX11
inline void ServerResponse::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerResponse.Response)
}
#endif
inline void ServerResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerResponse.Response)
}
inline void ServerResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerResponse.Response)
}
inline ::std::string* ServerResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:ServerResponse.Response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_response() {
  // @@protoc_insertion_point(field_release:ServerResponse.Response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:ServerResponse.Response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_CSLibs_2eproto
