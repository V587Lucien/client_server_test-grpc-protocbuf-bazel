// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CSLibs.proto
#ifndef GRPC_CSLibs_2eproto__INCLUDED
#define GRPC_CSLibs_2eproto__INCLUDED

#include "CSLibs.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class ServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "ServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status userLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> AsyncuserLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(AsyncuserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> PrepareAsyncuserLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(PrepareAsyncuserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status userSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> AsyncuserSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(AsyncuserSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> PrepareAsyncuserSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(PrepareAsyncuserSignUpRaw(context, request, cq));
    }
    virtual ::grpc::Status getUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> AsyncgetUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(AsyncgetUserLoginStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> PrepareAsyncgetUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(PrepareAsyncgetUserLoginStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status userLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> AsyncuserLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(AsyncuserLoginOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>> PrepareAsyncuserLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>>(PrepareAsyncuserLoginOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>> waitForOffLine(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>>(waitForOffLineRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>> AsyncwaitForOffLine(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>>(AsyncwaitForOffLineRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>> PrepareAsyncwaitForOffLine(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>>(PrepareAsyncwaitForOffLineRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* AsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* AsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* PrepareAsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* AsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* PrepareAsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* AsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerResponse>* PrepareAsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>* waitForOffLineRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>* AsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ClientRequestParams, ::ServerResponse>* PrepareAsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status userLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> AsyncuserLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(AsyncuserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> PrepareAsyncuserLogin(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(PrepareAsyncuserLoginRaw(context, request, cq));
    }
    ::grpc::Status userSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> AsyncuserSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(AsyncuserSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> PrepareAsyncuserSignUp(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(PrepareAsyncuserSignUpRaw(context, request, cq));
    }
    ::grpc::Status getUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> AsyncgetUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(AsyncgetUserLoginStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> PrepareAsyncgetUserLoginStatus(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(PrepareAsyncgetUserLoginStatusRaw(context, request, cq));
    }
    ::grpc::Status userLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::ServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> AsyncuserLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(AsyncuserLoginOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>> PrepareAsyncuserLoginOut(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerResponse>>(PrepareAsyncuserLoginOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ClientRequestParams, ::ServerResponse>> waitForOffLine(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ClientRequestParams, ::ServerResponse>>(waitForOffLineRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>> AsyncwaitForOffLine(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>>(AsyncwaitForOffLineRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>> PrepareAsyncwaitForOffLine(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>>(PrepareAsyncwaitForOffLineRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* AsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* AsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* PrepareAsyncuserSignUpRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* AsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* PrepareAsyncgetUserLoginStatusRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* AsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerResponse>* PrepareAsyncuserLoginOutRaw(::grpc::ClientContext* context, const ::ClientRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ClientRequestParams, ::ServerResponse>* waitForOffLineRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>* AsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ClientRequestParams, ::ServerResponse>* PrepareAsyncwaitForOffLineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_userLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_userSignUp_;
    const ::grpc::internal::RpcMethod rpcmethod_getUserLoginStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_userLoginOut_;
    const ::grpc::internal::RpcMethod rpcmethod_waitForOffLine_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response);
    virtual ::grpc::Status userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response);
    virtual ::grpc::Status getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response);
    virtual ::grpc::Status userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response);
    virtual ::grpc::Status waitForOffLine(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLogin(::grpc::ServerContext* context, ::ClientRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::ServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userSignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userSignUp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_userSignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserSignUp(::grpc::ServerContext* context, ::ClientRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::ServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getUserLoginStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getUserLoginStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getUserLoginStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserLoginStatus(::grpc::ServerContext* context, ::ClientRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::ServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userLoginOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userLoginOut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_userLoginOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLoginOut(::grpc::ServerContext* context, ::ClientRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::ServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_waitForOffLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_waitForOffLine() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_waitForOffLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status waitForOffLine(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwaitForOffLine(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_userLogin<WithAsyncMethod_userSignUp<WithAsyncMethod_getUserLoginStatus<WithAsyncMethod_userLoginOut<WithAsyncMethod_waitForOffLine<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userSignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userSignUp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_userSignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getUserLoginStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getUserLoginStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getUserLoginStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userLoginOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userLoginOut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_userLoginOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_waitForOffLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_waitForOffLine() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_waitForOffLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status waitForOffLine(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_userLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_userSignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_userSignUp() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_userSignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserSignUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getUserLoginStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getUserLoginStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getUserLoginStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserLoginStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_userLoginOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_userLoginOut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_userLoginOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLoginOut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_waitForOffLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_waitForOffLine() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_waitForOffLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status waitForOffLine(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ServerResponse, ::ClientRequestParams>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwaitForOffLine(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ClientRequestParams, ::ServerResponse>(std::bind(&WithStreamedUnaryMethod_userLogin<BaseClass>::StreameduserLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClientRequestParams,::ServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userSignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userSignUp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ClientRequestParams, ::ServerResponse>(std::bind(&WithStreamedUnaryMethod_userSignUp<BaseClass>::StreameduserSignUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userSignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userSignUp(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserSignUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClientRequestParams,::ServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getUserLoginStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getUserLoginStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ClientRequestParams, ::ServerResponse>(std::bind(&WithStreamedUnaryMethod_getUserLoginStatus<BaseClass>::StreamedgetUserLoginStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getUserLoginStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getUserLoginStatus(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetUserLoginStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClientRequestParams,::ServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userLoginOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userLoginOut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ClientRequestParams, ::ServerResponse>(std::bind(&WithStreamedUnaryMethod_userLoginOut<BaseClass>::StreameduserLoginOut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userLoginOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userLoginOut(::grpc::ServerContext* context, const ::ClientRequestParams* request, ::ServerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserLoginOut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClientRequestParams,::ServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_userLogin<WithStreamedUnaryMethod_userSignUp<WithStreamedUnaryMethod_getUserLoginStatus<WithStreamedUnaryMethod_userLoginOut<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_userLogin<WithStreamedUnaryMethod_userSignUp<WithStreamedUnaryMethod_getUserLoginStatus<WithStreamedUnaryMethod_userLoginOut<Service > > > > StreamedService;
};


#endif  // GRPC_CSLibs_2eproto__INCLUDED
